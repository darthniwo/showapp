{"version":3,"sources":["services/infoSrv.js"],"names":["angular","module","factory","infoSrv","$cookies","alertify","commonSrv","$filter","info","common","get","onSuccess","onError","query","queryBuilder","setDomain","actual_domain","setModel","compile","method","urls","find","then","response","data","success","results","error","getRegister","key","whereWithKeys","set","data_object","addObject","row","edit","update","delete"],"mappings":"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","file":"infoSrv.js","sourcesContent":["'use strict';\n(function(angular){\n  angular\n    .module('sbx')\n    .factory('infoSrv', ['$cookies', 'alertify', 'commonSrv','$filter', infoSrv]);\n\n    function infoSrv($cookies, alertify, commonSrv, $filter){\n      const info = {}, common = commonSrv;\n\n      /**\n       * // TODO: listar todos los registros\n       * Lista todos los registros en la tabla de informacion\n       *\n       * @author mauricio@sbx.cloud\n       *\n       * @param onSuccess {Function} Callback si todo esta bien y retorna sus datos.\n       * @param onError {Function} Cllback de error si la transacción falla.\n       */\n       info.get = function(onSuccess, onError){\n\n          let query = common.queryBuilder()\n              .setDomain(common.actual_domain)\n              .setModel('informacion')\n              .compile();\n\n          common.method.query(common.urls.find, query).then(function(){\n            let response = common.response.query.data;\n\n            if(response.success){\n              onSuccess(response.results);\n            }else{\n              onError(response.error);\n            }\n\n          });\n       };\n\n       /**\n       * // TODO: listar un registro especifico\n       * Buscar un registro en la tabla de informacion\n       *\n       * @author mauricio@sbx.cloud\n       *\n       * @param key {_KEY} campo \"_KEY\" del registro a editar (identificador unico para cada registro dentro de la plataforma)\n       * @param onSuccess {Function} Callback si todo esta bien y retorna sus datos.\n       * @param onError {Function} Cllback de error si la transacción falla.\n       */\n       info.getRegister = function(key, onSuccess, onError){\n\n          let query = common.queryBuilder()\n              .setDomain(common.actual_domain)\n              .setModel('informacion')\n              .whereWithKeys([key])\n              .compile();\n\n          common.method.query(common.urls.find, query).then(function(){\n            let response = common.response.query.data;\n\n            if(response.success){\n              onSuccess(response.results[0]);\n            }else{\n              onError(response.error);\n            }\n\n          });\n       };\n\n       /**\n       * // TODO: ingresar informacion al sistema - insert en tabla\n       * Insertar informacion en la tabla de la BD\n       *\n       * @author mauricio@sbx.cloud\n       *\n       * @param data_object {object} objeto con la informacion a ingresar, JSON con la estructura de los campos de la tabla.\n       * @param onSuccess {Function} Callback si todo esta bien y retorna sus datos.\n       * @param onError {Function} Cllback de error si la transacción falla.\n       */\n\n       info.set = function(data_object, onSuccess, onError){\n\n          let query = common.queryBuilder()\n              .setDomain(common.actual_domain)\n              .setModel('informacion')\n              .addObject(data_object)\n              .compile();\n\n          common.method.query(common.urls.row, query).then(function(){\n            let response = common.response.query.data;\n\n            if(response.success){\n              onSuccess('OK');\n            }else{\n              onError(response.error);\n            }\n          });\n\n       };\n\n      /**\n       * // TODO: editar informacion \n       * Editar informacion de un registro en la BD\n       *\n       * @author mauricio@sbx.cloud\n       *\n       * @param data_object {object} objeto con la informacion a ingresar el cual contiene el campo _KEY con su identificador, JSON con la estructura de los campos de la tabla.\n       * data_object = {\n       *  _KEY:  XXX-XXX-XXX-XXX\n       *  nombre: Jhon Doe\n       *  cargo: navegador de la matrix\n       * }\n       * campo \"_KEY\"(identificador unico para cada registro dentro de la plataforma)\n       * @param onSuccess {Function} Callback si todo esta bien y retorna sus datos.\n       * @param onError {Function} Cllback de error si la transacción falla.\n       */\n\n       info.edit = function(data_object, onSuccess, onError){\n\n          let query = common.queryBuilder()\n              .setDomain(common.actual_domain)\n              .setModel('informacion')\n              .addObject(data_object)\n              .compile();\n\n          common.method.query(common.urls.update, query).then(function(){\n            let response = common.response.query.data;\n\n            if(response.success){\n              onSuccess('OK');\n            }else{\n              onError(response.error);\n            }\n          });\n\n       };\n\n       /**\n       * // TODO: borrar un registro en la tabla\n       * borrar informacion\n       *\n       * @author mauricio@sbx.cloud\n       *\n       * @param key {_KEY} campo \"_KEY\" del registro a editar (identificador unico para cada registro dentro de la plataforma)\n       * @param onSuccess {Function} Callback si todo esta bien y retorna sus datos.\n       * @param onError {Function} Cllback de error si la transacción falla.\n       */\n\n       info.delete = function(key, onSuccess, onError){\n          let query = common.queryBuilder()\n              .setDomain(common.actual_domain)\n              .setModel('informacion')\n              .whereWithKeys([key])\n              .compile();\n\n          common.method.query(common.urls.delete, query).then(function(){\n            let response = common.response.query.data;\n            if(response.success){\n              onSuccess('OK');\n            }else{\n              onError(response.error);\n            }\n          });\n       }\n\n      return info;\n    } \n\n})(angular);\n"]}